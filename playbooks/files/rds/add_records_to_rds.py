#!/usr/bin/env python3

import psycopg2

from contextlib import closing
from argparse import ArgumentParser
from psycopg2 import sql
from psycopg2._psycopg import Error, OperationalError


def _parse_param():
    parser = ArgumentParser(description = 'Get data for connection string')
    parser.add_argument('--host', required = True)
    parser.add_argument('--port', required = True)
    parser.add_argument('--database', '-db', required = True)
    parser.add_argument('--username', '-user', required = True)
    parser.add_argument('--password', '-pass', required = True)
    args = parser.parse_args()
    return args


def _create_connection_dict() -> dict:
    """Create connection to database"""
    args = _parse_param()
    db_connect = {
        'host': args.host,
        'port': args.port,
        'user': args.username,
        'password': args.password,
        'database': args.database
    }
    return db_connect


def _execute_sql(sql_query: str) -> list:
    """Execute sql query"""
    connection_dict = _create_connection_dict()
    res = list()
    try:
        with closing(psycopg2.connect(**connection_dict)) as conn:
            try:
                with conn.cursor() as cursor:
                    cursor.execute(sql_query)
                    if cursor.description is not None:
                        res = cursor.fetchall()
            except OperationalError as err:
                print(f"The error '{err}' occurred")
            conn.commit()
    except Error as e:
        print(f"The error '{e}' occurred")
    return res


def create_table(schema_name: str, table_name: str, *columns):
    """Create table in database if it not exists"""
    model_query = sql.SQL(
        "create table if not exists {}.{}(id bigint generated by default as identity primary key,{} text);")
    create_table_query = model_query.format(
                                            sql.Identifier(schema_name),
                                            sql.Identifier(table_name),
                                            sql.SQL(', ').join(map(sql.Identifier, columns))
                                           )
    _execute_sql(create_table_query)


def generate_random_values_and_insert_into_table(schema_name: str, table_name: str, range_start: int, range_stop: int, *columns):

    model_query = sql.SQL("insert into {}.{} select generate_series({},{}) as id, md5(random()::text) AS {};")
    record_query = model_query.format(
                                      sql.Identifier(schema_name),
                                      sql.Identifier(table_name),
                                      sql.Literal(range_start),
                                      sql.Literal(range_stop),
                                      sql.SQL(', ').join(map(sql.Identifier, columns)))
    _execute_sql(record_query)


def get_db_size(db_name: str):
    """Returns db size"""
    model_query = sql.SQL("select pg_database_size({}) as dbsize;")
    db_size_query = model_query.format(sql.Identifier(db_name))
    _execute_sql(db_size_query)


if __name__ == '__main__':
    n = 14027776
    args = _parse_param()
    create_table('public', 'test', 'content')
    for i in range(1, 2):
        generate_random_values_and_insert_into_table('public', 'test', i+(i-1)*n, i*n, 'content')
    print(get_db_size())

