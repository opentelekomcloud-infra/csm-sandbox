---
- name: Prepare clouds.yaml for test_host
  import_playbook: prepare_config.yml

- name: Prepare variables
  hosts: test_host
  tasks:
  - name: Register scenario 1 vars
    set_fact:
      terraform_base_dir: "terraform"
      requirements: "requirements.txt"

- name: Build infrastructure
  hosts: test_host
  roles:
    - build_infrastructure
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
  vars:
    infra_state: present
  tasks:
  - name: Register build result
    set_fact:
      bastion_public_ip: "{{ tf_output.outputs['scn1_bastion_fip'].value }}"
      loadbalancer_public_ip:  "{{ tf_output.outputs['scn1_lb_fip'].value }}"
      node_ips: "{{ tf_output.outputs['scn1_ecs_local_ips'].value }}"
  - name: Download private key from test_host
    fetch:
      src: "{{ tmp_dir }}/{{ key_name }}"
      dest:  "{{ local_private_key }}"
      mode: 0600
      flat: yes

- name: Register used hosts
  hosts: local
  tasks:
  - name: Set local facts
    set_fact:
      loadbalancer_public_ip: "{{ hostvars.test_host.loadbalancer_public_ip }}"
      bastion_public_ip: "{{ hostvars.test_host.bastion_public_ip }}"
  - name: Register Bastion
    add_host:
      name: "bastion"
      ansible_host: "{{ bastion_public_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
  - name: Register nodes
    add_host:
      name: "{{ item }}"
      groups: "gatewayed"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
      ansible_ssh_common_args: "-o ProxyCommand='ssh -W %h:%p -q linux@{{ bastion_public_ip }} -i {{ local_private_key }}' -o PasswordAuthentication=no"
    loop: "{{ hostvars.test_host.node_ips }}"

- name: Wait for bastion
  hosts: bastion
  gather_facts: no
  tasks:
  - name: Wait for host to be up
    wait_for_connection:
      timeout: 120

- name: Wait for hosts
  hosts: gatewayed
  gather_facts: no
  tasks:
  - name: Wait for host to be up
    wait_for_connection:
      timeout: 120

- name: Register existing settings
  hosts: local
  tasks:
    - name: Register host
      add_host:
        hostname: "scn1_ecs"
        ansible_ssh_host: "{{ hostvars.bastion.ansible_host }}"
        ansible_ssh_user: "linux"

- name: Wait for host
  hosts: scn1_ecs
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        timeout: 120

- name: Start Server
  hosts: gatewayed
  become: yes
  roles:
    - too_simple_server
  vars:
    debug: True
    server_port: 80

- name: Install telegraf client on Bastion
  hosts: bastion
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
    - "./vars/nginx_telegraf_local.yml"
  roles:
    - role: telegraf-client
      vars:
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: "influx"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: "localhost"
            extra_parameters: "{{ extra_parameters }}"

- name: Install telegraf client on nodes
  hosts: gatewayed
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  roles:
    - telegraf-client
  vars:
    telegraf_plugins_base:
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"
      - name: net
        options:
          interfaces:
            - "eth*"
            - "enp0s[0-1]"
            - "lo"
            - "ens3"

- name: Checking delatore processes
  hosts: test_host
  tasks:
    - name: Get running delatore processes list from remote host
      ignore_errors: yes
      shell: "ps aux | grep 'csm_test_utils monitor' | awk '{print $2}'"
      register: process_monitor
      tags:
        - skip_ansible_lint
    - name: Kill running delatore processes
      ignore_errors: yes
      shell: "kill {{ process_monitor.stdout_lines[0] }}"
      tags:
        - skip_ansible_lint
    - name: Waiting for status
      wait_for:
        path: "/proc/{{ process_monitor.stdout_lines[0] }}/status"
        state: absent
      ignore_errors: yes

- name: Run test for scenario
  hosts: test_host
  vars:
    clouds_yaml_file: "{{ lookup('env', 'OS_CLIENT_CONFIG_FILE') }}"
    tmp_dir: "{{ clouds_yaml_file | dirname }}"
  tasks:
  - name: Execute csm_test_utils
    command:
       cmd: "python -m csm_test_utils monitor --target {{ loadbalancer_public_ip }} --telegraf "http://{{ bastion_public_ip }}"
       chdir: "{{ tmp_dir }}/project"
