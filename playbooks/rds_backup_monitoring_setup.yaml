---
- name: Prepare controller variables
  import_playbook: bastion_setup.yaml

- name: Prepare variables
  hosts: local
  vars:
    scenario_name: rds_backup_monitoring
    infra_state: present
    terraform_variables:
      network_id: "{{ main_network_id }}"
      router_id: "{{ main_router_id }}"
      subnet_id: "{{ main_subnet_id }}"
      psql_password: "Spaciba2020!"
  roles:
    - build_infrastructure
  tasks:
    - name: Register build result
      set_fact:
        cloud_name: "{{ lookup('env', 'OS_CLOUD') }}"
        ecs_instance_ip: "{{ tf_output.outputs['ecs_ip'].value }}"
        rds_instance_id: "{{ tf_output.outputs['rds_id'].value }}"
        db_password: "{{ tf_output.outputs['db_password'].value }}"
        db_username: "{{ tf_output.outputs['db_username'].value }}"
        db_address: "{{ tf_output.outputs['db_address'].value }}"
        db_host: "{{ tf_output.outputs['db_host'].value }}"
        db_port: "{{ tf_output.outputs['db_port'].value }}"

    - name: Register ecs
      add_host:
        name: ecs
        groups: gatewayed
        ansible_host: "{{ ecs_instance_ip }}"
        ansible_ssh_common_args: >
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand='ssh -W %h:%p
          -q linux@{{ controller_public_ip }}
          -i {{ local_private_key }}
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null'
          -o PasswordAuthentication=no

- name: Wait for host
  hosts: ecs
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        delay: 5
        timeout: 120

- name: Start Server
  hosts: ecs
  become: yes
  vars:
    server_local_port: 8081
    run_option: sqla
    drivername: "postgresql+psycopg2"
    scenario_name: rds_backup_monitoring
    test_scripts_path: /tmp/test-scripts
    source: "{{ test_scripts_path }}/{{ run_option }}/data.yaml"
  roles:
    - role: too_simple_server
      vars:
        pg_db_url: "{{ hostvars.local.db_address }}"
        pg_database: entities
        pg_username: "{{ hostvars.local.db_username }}"
        pg_password: "{{ hostvars.local.db_password }}"
        pg_host: "{{ hostvars.local.db_host }}"
        pg_port: "{{ hostvars.local.db_port }}"
        debug: false
  tasks:
    - name: Set facts
      set_fact:
        server_local_port: "{{ server_local_port }}"

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install PIP, libpq-dev and python-dev
      apt:
        name:
          - python3-setuptools
          - python3-pip
          - libpq-dev
          - python-dev
          - cron

    - name: Copy scripts to host
      copy:
        src: rds/
        dest: "{{ test_scripts_path }}/"

    - name: Install pg2 and SQLAlchemy for Postgresql
      pip:
        requirements: "{{ test_scripts_path }}/rds-backup-requirements.txt"
        executable: pip3

    - name: Changing permissions of "check_rds_filling_status.sh"
      file:
        dest: "{{ test_scripts_path }}/check_rds_filling_status.sh"
        mode: a+x

    - name: Add records to rds in background  # noqa 301 305
      shell: "start-stop-daemon -Sbmvp {{ test_scripts_path }}/__main__.pid
              -x /usr/bin/python3 {{ test_scripts_path }}/__main__.py --
              --run_option {{ run_option }}
              --source {{ source }}
              --drivername {{ drivername }}
              --host {{ pg_host }}
              --port {{ pg_port }}
              --username {{ pg_username }}
              --password {{ pg_password }}
              --database {{ pg_database }}"

    - name: Schedule RDS script status check
      cron:
        name: Check status of RDS filling script
        minute: "*/59"
        job: "{{ test_scripts_path }}/check_rds_filling_status.sh
               {{ run_option }}
               {{ source }}
               {{ pg_host }}
               {{ pg_port }}
               {{ pg_username }}
               {{ pg_password }}
               {{ drivername }}
               {{ pg_database }}"

- name: Install telegraf client on Server
  hosts: ecs
  become: true
  vars_files:
    - ./vars/telegraf_dbconnection_vars.yaml
  roles:
    - role: telegraf_client
      vars:
        telegraf_influxdb_retention_policy: ""
        telegraf_local_port: 8080
        server_local_port: 8081
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: influx
          - name: postgresql
            options:
              address: "postgres://{{ hostvars.local.db_username }}\
              :{{ hostvars.local.db_password }}@{{ hostvars.local.db_address }}/entities"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: localhost
            extra_parameters: |
              location / {
                  proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_http_version 1.1;
                  proxy_pass         http://localhost:{{ server_local_port }};
              }
              location /telegraf {
                  proxy_pass         http://localhost:{{ telegraf_local_port }};
                  proxy_set_header   Host $host;
              }

- name: Install csm test utils
  hosts: ecs
  become: yes
  vars:
    endpoint: https://rds.eu-de.otc.t-systems.com
    target: http://localhost:8081
    telegraf: http://localhost:8080
  tasks:
    - name: Copy clouds.yaml to ecs
      copy:
        src: "{{ os_cloud_config_file }}"
        dest: /tmp/

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install PIP
      apt:
        name:
          - python3-setuptools
          - python3-pip

    - name: Install test utils
      pip:
        executable: pip3
        name: csm-test-utils
        state: forcereinstall
