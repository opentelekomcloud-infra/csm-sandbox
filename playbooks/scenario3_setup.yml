---
- name: Prepare clouds.yaml for test_host
  import_playbook: prepare_config.yml

- name: Prepare variables
  hosts: test_host
  tasks:
  - name: Register scenario 1 vars
    set_fact:
      terraform_base_dir: "terraform"
      requirements: "requirements.txt"

- name: Build infrastructure
  hosts: test_host
  roles:
    - build_infrastructure
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
  vars:
    infra_state: present
  tasks:
  - name: Register build result
    set_fact:
      server_public_ip: "{{ tf_output.outputs['scn3_server_fip'].value }}"
  - name: Download private key from test_host
    fetch:
      src: "{{ tmp_dir }}/{{ key_name }}"
      dest:  "{{ local_private_key }}"
      mode: 0600
      flat: yes

- name: Register used hosts
  hosts: local
  tasks:
  - name: Set local facts
    set_fact:
      server_public_ip: "{{ hostvars.test_host.server_public_ip }}"
  - name: Register Bastion
    add_host:
      name: "bastion"
      ansible_host: "{{ server_public_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"

- name: Wait for bastion
  hosts: bastion
  gather_facts: no
  tasks:
  - name: Wait for host to be up
    wait_for_connection:
      timeout: 120

- name: Register existing settings
  hosts: local
  roles:
    - register_host
  vars:
    dnsname_or_ip: "{{ server_public_ip }}"
    group: "scn3_ecs"

- name: Prepare attached devices on server
  hosts: scn3_ecs
  become: yes
  vars:
    devices:
      sata: "/dev/vdb"
      sas: "/dev/vdc"
      ssd: "/dev/vdd"
  tasks:
    - name: Add hdparm repository [Debian/Ubuntu]
      apt_repository:
        repo: deb http://deb.debian.org/debian stretch main
        state: present

    - name: Install hdparm
      apt:
        name: hdparm
        update_cache: yes

    - name: Create a ext4 filesystem on attached disks
      filesystem:
        fstype: ext4
        dev: "{{ item.value }}"
      with_items: "{{ lookup('dict', devices) }}"

    - name: Create directories for mount
      file:
        path: "/mnt/{{ item.key }}"
        state: directory
        mode: "0755"
      with_items: "{{ lookup('dict', devices) }}"

    - name: Mount up devices
      mount:
        path: "/mnt/{{ item.key }}"
        src: "{{ item.value }}"
        fstype: ext4
        state: mounted
      with_items: "{{ lookup('dict', devices) }}"

    - name: Cron job for create big files on all devices every 15 minutes
      cron:
        name: "Creating big file on {{ item.value }}"
        minute: "*/5"
        job: /bin/dd if=/dev/urandom of="/mnt/{{ item.key }}/bigfile.txt" bs=1000000 count=1000 oflag=dsync
      with_items: "{{ lookup('dict', devices) }}"

    - name: Cron job for reading big files on all devices every 5 minutes
      cron:
        name: "Reading big files from {{ item.value }}"
        minute: "*/2"
        job: /sbin/hdparm -tT "{{ item.value }}"
      with_items: "{{ lookup('dict', devices) }}"

- name: Install telegraf client on server
  hosts: scn3_ecs
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  roles:
    - telegraf-client
  vars:
    telegraf_plugins_base:
      - name: mem
      - name: diskio
        options:
          devices: ["vdb", "vdc", "vdd"]
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"
