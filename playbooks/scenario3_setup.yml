---
- name: Prepare clouds.yaml for test_host
  import_playbook: prepare_config.yml

- name: Prepare variables
  hosts: test_host
  tasks:
  - name: Register scenario 3 vars
    set_fact:
      terraform_base_dir: "terraform"
      requirements: "requirements.txt"

- name: Build infrastructure
  hosts: test_host
  roles:
    - build_infrastructure
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
  vars:
    infra_state: present
  tasks:
  - name: Register build result
    set_fact:
      server_public_ip: "{{ tf_output.outputs['scn3_server_fip'].value }}"
      node_ips: "{{ tf_output.outputs['scn3_ecs_local_ips'].value }}"
      dns_instance: "{{ tf_output.outputs['scn5_instance_address'].value }}"
      dns_record: "{{ tf_output.outputs['scn5_dns_record_name'].value }}"
  - name: Download private key from test_host
    fetch:
      src: "{{ tmp_dir }}/{{ key_name }}"
      dest:  "{{ local_private_key }}"
      mode: 0600
      flat: yes

- name: Register used hosts
  hosts: local
  tasks:
  - name: Set local facts
    set_fact:
      server_public_ip: "{{ hostvars.test_host.server_public_ip }}"
  - name: Register Bastion
    add_host:
      name: "bastion"
      ansible_host: "{{ server_public_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
  - name: Register nodes
    add_host:
      name: "{{ item }}"
      groups: "gatewayed"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
      ansible_ssh_common_args: "-o ProxyCommand='ssh -W %h:%p -q linux@{{ server_public_ip }} -i {{ local_private_key }}' -o PasswordAuthentication=no"
    loop: "{{ hostvars.test_host.node_ips }}"
  - name: Register instance for DNS resolving
    add_host:
      name: "dns_host"
      ansible_host: "{{ hostvars.test_host.dns_instance }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
      ansible_ssh_common_args: "-o ProxyCommand='ssh -W %h:%p -q linux@{{ server_public_ip }} -i {{ local_private_key }}' -o PasswordAuthentication=no"

- name: Wait for bastion
  hosts: bastion
  gather_facts: no
  tasks:
  - name: Wait for host to be up
    wait_for_connection:
      timeout: 120

- name: Prepare attached devices on server
  hosts: gatewayed
  become: yes
  vars:
    devices:
      sata: "/dev/vdb"
      sas: "/dev/vdc"
      ssd: "/dev/vdd"
  tasks:
    - name: Add hdparm repository [Debian/Ubuntu]
      apt_repository:
        repo: deb http://deb.debian.org/debian stretch main
        state: present

    - name: Install required packages
      apt:
        name:
          - hdparm
          - cron
        update_cache: yes

    - name: Create a ext4 filesystem on attached disks
      filesystem:
        fstype: ext4
        dev: "{{ item.value }}"
      with_items: "{{ lookup('dict', devices) }}"

    - name: Create directories for mount
      file:
        path: "/mnt/{{ item.key }}"
        state: directory
        mode: "0755"
      with_items: "{{ lookup('dict', devices) }}"

    - name: Mount up devices
      mount:
        path: "/mnt/{{ item.key }}"
        src: "{{ item.value }}"
        fstype: ext4
        state: mounted
      with_items: "{{ lookup('dict', devices) }}"

    - name: Cron job for create big files on all devices every 15 minutes
      cron:
        name: "Creating big file on {{ item.value }}"
        minute: "*/5"
        job: /bin/dd if=/dev/urandom of="/mnt/{{ item.key }}/bigfile.txt" bs=1000000 count=1000 oflag=dsync
      with_items: "{{ lookup('dict', devices) }}"

    - name: Cron job for reading big files on all devices every 5 minutes
      cron:
        name: "Reading big files from {{ item.value }}"
        minute: "*/2"
        job: /sbin/hdparm -tT "{{ item.value }}"
      with_items: "{{ lookup('dict', devices) }}"

- name: Install telegraf client on server
  hosts: gatewayed
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  roles:
    - telegraf-client
  vars:
    telegraf_influxdb_retention_policy: ""
    telegraf_plugins_base:
      - name: mem
      - name: system
      - name: diskio
        options:
          devices: ["vdb", "vdc", "vdd"]
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"

- name: Install telegraf client on Bastion
  hosts: bastion
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
    - "./vars/nginx_telegraf_local.yml"
  roles:
    - role: telegraf-client
      vars:
        telegraf_influxdb_retention_policy: ""
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: "influx"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: "localhost"
            extra_parameters: "{{ extra_parameters }}"

- name: Start Server on dns host
  hosts: dns_host
  become: yes
  roles:
    - too_simple_server
  vars:
    debug: True
    server_port: 80

- name: Checking reporting processes
  hosts: bastion
  tasks:
    - name: Get reporting processes list from remote host  # noqa 301 305
      ignore_errors: yes
      shell: "ps aux | grep 'csm_test_utils internal_dns_resolve' | awk '{print $2}'"
      register: process_monitor
    - name: Kill running reporting processes  # noqa 301 305
      ignore_errors: yes
      shell: "kill {{ process_monitor.stdout_lines[0] }}"
    - name: Waiting for status
      wait_for:
        path: "/proc/{{ process_monitor.stdout_lines[0] }}/status"
        state: absent
      ignore_errors: yes

- name: Install csm test utils
  hosts: bastion
  become: yes
  vars:
    dns: "{{ hostvars.test_host.dns_record }}"
    nohup_py3: "nohup /usr/bin/python3 -m csm_test_utils"
    telegraf_host: "http://localhost"
  tasks:
    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install PIP
      apt:
        name:
          - python3-setuptools
          - python3-pip

    - name: Install test utils
      pip:
        executable: pip3
        name: csm-test-utils
        state: forcereinstall

    - name: Start monitoring  # noqa 301 305
      shell: "{{ nohup_py3 }} {{ item }} --telegraf {{ telegraf_host }} --dns_name  {{ dns }} &"
      loop:
        - "internal_dns_host_check"
