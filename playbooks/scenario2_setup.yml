---
- name: Prepare clouds.yaml for test_host
  import_playbook: prepare_config.yml

- name: Prepare variables
  hosts: test_host
  tasks:
  - name: Register scenario 2 vars
    set_fact:
      terraform_base_dir: "terraform"
      requirements: "requirements.txt"

- name: Build infrastructure
  hosts: test_host
  roles:
    - build_infrastructure
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
    TF_VAR_psql_password: "{{ psql_password }}"
  vars:
    infra_state: present
  tasks:
  - name: Register build result
    set_fact:
      db_password: "{{ tf_output.outputs[\"db_password\"].value }}"
      db_username: "{{ tf_output.outputs[\"db_username\"].value }}"
      db_address: "{{ tf_output.outputs[\"db_address\"].value }}"
      scn2_public_ip: "{{ tf_output.outputs[\"scn2_public_ip\"].value }}"
  - name: Download private key from test_host
    fetch:
      src: "{{ tmp_dir }}/{{ key_name }}"
      dest:  "{{ local_private_key }}"
      mode: 0600
      flat: yes

- name: Register used hosts
  hosts: local
  tasks:
    - name: Register host
      add_host:
        hostname: "scn2_ecs"
        ansible_ssh_host: "{{ hostvars.test_host.scn2_public_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"

- name: Wait for host
  hosts: scn2_ecs
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        delay: 5
        timeout: 120

- name: Start Server
  hosts: scn2_ecs
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  vars:
    server_port: 8081
  roles:
    - role: too_simple_server
      vars:
        pg_db_url: "{{ hostvars.test_host.db_address }}"
        pg_database: "entities"
        pg_username: "{{ hostvars.test_host.db_username }}"
        pg_password: "{{ hostvars.test_host.db_password }}"
        debug: False
  tasks:
    - name: Register facts
      set_fact:
        server_local_port: "{{ server_port }}"

- name: Install telegraf client on Server
  hosts: scn2_ecs
  become: true
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  roles:
    - role: telegraf-client
      vars:
        telegraf_local_port: 8080
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: "influx"
          - name: postgresql
            options:
              address: "postgres://{{ hostvars.test_host.db_username }}:{{ hostvars.test_host.db_password }}@{{ hostvars.test_host.db_address }}/entities"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: "localhost"
            extra_parameters: |
              location / {
                  proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_http_version 1.1;
                  proxy_pass         http://localhost:{{ server_local_port }};
              }
              location /telegraf {
                  proxy_pass         http://localhost:{{ telegraf_local_port }};
                  proxy_set_header   Host $host;
              }

- name: Checking delatore processes
  hosts: test_host
  tasks:
    - name: Get running delatore processes list from remote host
      ignore_errors: yes
      shell: "ps -few | grep delatore | awk '{print $2}'"
      register: delatore_running_processes
      tags:
        - skip_ansible_lint
    - name: Kill running delatore processes
      ignore_errors: yes
      shell: "kill {{ delatore_running_processes.stdout_lines.['csm_test_utils rds_monitor'].value }}"
      tags:
        - skip_ansible_lint
    - name: Waiting for status
      wait_for:
        path: "/proc/{{ delatore_running_processes.stdout_lines.['csm_test_utils rds_monitor'].value }}/status"
        state: absent
      ignore_errors: yes

- name: Run test.sh for scenario
  hosts: test_host
  become: yes
  environment:
     AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
     AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
     INFLUX_PASSWORD: "{{ telegraf_influxdb_password }}"
     OS_CLOUD: "devstack"
  tasks:
  - name: Execute test.sh
    shell: "{{ start_ssh_agent }} && ./test.sh {{ scenario_name }}"
    args:
      chdir: "../scenarios"
    tags:
      - skip_ansible_lint