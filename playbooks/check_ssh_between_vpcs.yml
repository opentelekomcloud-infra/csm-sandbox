---
- name: Prepare clouds.yaml for test_host
  import_playbook: prepare_config.yml

- name: Prepare variables
  hosts: test_host
  tasks:
  - name: Register scenario checking ssh
    set_fact:
      terraform_base_dir: "terraform"
      requirements: "requirements.txt"

- name: Build infrastructure
  hosts: test_host
  roles:
    - build_infrastructure
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
  vars:
    infra_state: present
  tasks:
  - name: Register build result
    set_fact:
      ecs_1_ip: "{{ tf_output.outputs['ecs_1_private_ip'].value }}"
      ecs_2_ip: "{{ tf_output.outputs['ecs_2_private_ip'].value }}"
      ecs_1_public_ip: "{{ tf_output.outputs['ecs_1_public_ip'].value }}"
      ecs_2_public_ip: "{{ tf_output.outputs['ecs_2_public_ip'].value }}"
  - name: Download private key from test_host
    fetch:
      src: "{{ tmp_dir }}/{{ key_name }}"
      dest:  "{{ local_private_key }}"
      mode: 0600
      flat: yes

- name: Register used hosts
  hosts: local
  tasks:
  - name: Set local facts
    set_fact:
      ecs_1_ip: "{{ hostvars.test_host.ecs_1_ip }}"
      ecs_2_ip: "{{ hostvars.test_host.ecs_2_ip }}"
      ecs_1_public_ip: "{{ hostvars.test_host.ecs_1_public_ip }}"
      ecs_2_public_ip: "{{ hostvars.test_host.ecs_2_public_ip }}"
  - name: Register ecs_1
    add_host:
      name: "ecs_1"
      ansible_host: "{{ ecs_1_public_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
  - name: Register ecs_2
    add_host:
      name: "ecs_2"
      ansible_host: "{{ ecs_2_public_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"


- name: Wait for hosts
  hosts: ecs_1, ecs_2
  gather_facts: no
  tasks:
  - name: Wait for host to be up
    wait_for_connection:
      timeout: 120

- name: Installing packages on server
  become: yes
  hosts: ecs_1, ecs_2
  gather_facts: no
  tasks:
  - name: Install OpenSSH and iperf
    apt:
      pkg:
        - openssh-server
        - iperf
      state: present


- name: Create directories and copy scripts to ecs_1
  become: yes
  hosts: ecs_1
  gather_facts: no
  tasks:
  - name: Create directory scripts on ecs_1
    file:
      path: /home/scripts
      state: directory
      mode: "0755"
  - name: Copy script for iperf server
    copy:
      src: files/ssh_check_scripts/iperf_server.sh
      dest: /home/scripts/iperf_server.sh


- name: Create directories and copy scripts to ecs_2
  become: yes
  hosts: ecs_2
  gather_facts: no
  tasks:
  - name: Create directory scripts on ecs_2
    file:
      path: /home/scripts
      state: directory
      mode: "0755"
  - name: Copy script for iperf client
    copy:
      src: files/ssh_check_scripts/iperf_client.sh
      dest: /home/scripts/iperf_client.sh

- name: Download private key from test_host
  hosts: test_host
  gather_facts: no
  tasks:
  - name: Fetching private key from test host to awx
    fetch:
      src:  "{{ clouds_yaml_file | dirname }}/{{ key_name }}"
      dest:  ~/.ssh/{{ key_name }}
      mode: 0600
      flat: yes

- name: Copy private key to ecs_1
  hosts: ecs_1
  gather_facts: no
  tasks:
  - name: Copy private key to ecs_1
    copy:
      src:  ~/.ssh/{{ key_name }}
      dest: ~/.ssh/{{ key_name }}


- name: Install telegraf client on Bastion
  hosts: ecs_1
  become: yes
  roles:
  - role: telegraf-client
    vars:
      telegraf_plugins_base:
      - name: http_listener_v2
        options:
          service_address: "localhost:8080"
          data_format: "influx"


- name: Make iperf server
  hosts: ecs_1
  gather_facts: no
  tasks:
  - name: Make ecs_1 iperf server
    script: ssh_check_scripts/iperf_server.sh

- name: Make iperf client
  hosts: ecs_2
  gather_facts: no
  tasks:
  - name: Set local facts
    set_fact:
      ecs_1_ip: "{{ hostvars.test_host.ecs_1_ip }}"
  - name: Make ecs_2 iperf client
    script: ssh_check_scripts/iperf_client.sh {{ ecs_1_ip }}