---
- name: Prepare clouds.yaml for test_host
  import_playbook: prepare_config.yml

- name: Prepare variables
  hosts: test_host
  tasks:
  - name: Register scenario 2 vars
    set_fact:
      terraform_base_dir: "terraform"
      requirements: "requirements.txt"

- name: Build infrastructure
  hosts: test_host
  roles:
    - build_infrastructure
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
  vars:
    infra_state: present
  tasks:
  - name: Register build result
    set_fact:
      bastion_public_ip: "{{ tf_output.outputs['scn3_5_bastion_fip'].value }}"
      scn3_5_initiator_ip: "{{ tf_output.outputs['scn3_5_initiator_instance_ip'].value }}"
      scn3_5_target_ip: "{{ tf_output.outputs['scn3_5_target_instance_ip'].value }}"
  - name: Download private key from test_host
    fetch:
      src: "{{ tmp_dir }}/{{ key_name }}"
      dest:  "{{ local_private_key }}"
      mode: 0600
      flat: yes

- name: Register used hosts
  hosts: local
  tasks:
  - name: Set local facts
    set_fact:
      bastion_public_ip: "{{ hostvars.test_host.bastion_public_ip }}"
      scn3_5_initiator_ip: "{{ hostvars.test_host.scn3_5_initiator_ip }}"
      scn3_5_target_ip: "{{ hostvars.test_host.scn3_5_target_ip }}"
  - name: Register Bastion
    add_host:
      name: "bastion"
      ansible_host: "{{ bastion_public_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "~/.ssh/{{ key_name }}"
  - name: Register scn3_5_initiator
    add_host:
      name: "scn3_5_initiator"
      groups: "gatewayed"
      ansible_host: "{{ scn3_5_initiator_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
      ansible_ssh_common_args: "-o ProxyCommand='ssh -W %h:%p -q linux@{{ bastion_public_ip }} -i {{ local_private_key }}' -o PasswordAuthentication=no"
  - name: Register scn3_5_target
    add_host:
      name: "scn3_5_target"
      groups: "gatewayed"
      ansible_host: "{{ scn3_5_target_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
      ansible_ssh_common_args: "-o ProxyCommand='ssh -W %h:%p -q linux@{{ bastion_public_ip }} -i {{ local_private_key }}' -o PasswordAuthentication=no"

- name: Wait for hosts
  hosts: gatewayed
  gather_facts: no
  tasks:
  - name: Wait for host to be up
    wait_for_connection:
      timeout: 120

- name: Prepare attached device on target server
  hosts: scn3_5_target
  become: yes
  vars_files:
    - "./vars/scenario_3_5_vars.yml"
  roles:
    - iscsi_target

- name: Prepare initiator and connect device
  hosts: scn3_5_initiator
  become: yes
  vars_files:
    - "./vars/scenario_3_5_vars.yml"
  tasks:
    - name: Perform a discovery on target
      open_iscsi:
        show_nodes: yes
        discover: yes
        portal: "{{ hostvars.scn3_5_target.ansible_host }}"

    - name: Connect to the target
      open_iscsi:
        auto_node_startup: yes
        login: yes
        node_user: "{{ incominguser_username }}"
        node_pass: "{{ incominguser_password }}"
        portal: "{{ hostvars.scn3_5_target.ansible_host }}"

- name: Prepare attached iSCSI device on initiator
  hosts: scn3_5_initiator
  become: yes
  vars_files:
    - "./vars/scenario_3_5_vars.yml"
  tasks:
    - name: Add hdparm repository [Debian/Ubuntu]
      apt_repository:
        repo: deb http://deb.debian.org/debian stretch main
        state: present

    - name: Install hdparm
      apt:
        name: hdparm
        update_cache: yes

    - name: Create a ext4 filesystem on attached disks
      filesystem:
        fstype: ext4
        dev: "{{ device }}"

    - name: Create directories for mount
      file:
        path: "{{ mount_point }}"
        state: directory
        mode: "0755"

    - name: Mount up devices
      mount:
        path: "{{ mount_point }}"
        src: "{{ device }}"
        fstype: ext4
        state: mounted

    - name: Install cron
      apt:
        pkg:
          - cron

    - name: Cron job for create big files on SCSI device every 5 minutes
      cron:
        name: "Creating big file on iSCSI device"
        minute: "*/5"
        job: /bin/dd if=/dev/urandom of="{{ mount_point }}/bigfile.txt" bs=5000000 count=100 oflag=dsync

    - name: Cron job for reading big files on all devices every 2 minutes
      cron:
        name: "Reading big files from iSCSI device"
        minute: "*/2"
        job: /sbin/hdparm -tT "{{ device }}"

- name: Install telegraf client on initiator
  hosts: scn3_5_initiator
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
    - "./vars/scenario_3_5_vars.yml"
  roles:
    - telegraf-client
  vars:
    telegraf_plugins_base:
      - name: mem
      - name: diskio
        options:
          devices: ["{{ device }}"]
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"
      - name: http_listener_v2
        options:
          service_address: "localhost:8080"
          data_format: "influx"

- name: Prepare test
  hosts: scn3_5_initiator
  become: yes
  tasks:
    - name: copy test script on initiator
      copy:
        src: iscsi_connection_status.sh
        dest: /tmp/

    - name: Changing perm of "iscsi_connection_status.sh", adding "+x"
      file: dest=/tmp/iscsi_connection_status.sh mode=a+x

    - name: Schedule connection test
      cron:
        name: "Check status of iSCSI connection"
        minute: "*/1"
        job: /tmp/iscsi_connection_status.sh
