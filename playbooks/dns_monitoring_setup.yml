---
- name: Prepare controller variables
  import_playbook: setup_scenarios_controller.yml

- name: Prepare variables
  hosts: test_host
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
    TF_VAR_network_id: "{{ main_network_id }}"
    TF_VAR_router_id: "{{ main_router_id }}"
    TF_VAR_subnet_id: "{{ main_subnet_id }}"
  vars:
    scenario_name: dns_monitoring
    terraform_base_dir: terraform
    requirements: requirements.txt
    key_name: key_csm_controller
    infra_state: present
  roles:
    - build_infrastructure
  tasks:
    - name: Register build result
      set_fact:
        dns_monitoring_instance_ip: "{{ tf_output.outputs['dns_instance_ip'].value }}"
        dns_monitoring_record_name: "{{ tf_output.outputs['dns_record_name'].value }}"

    - name: Register dns_monitoring
      add_host:
        name: "dns_instance"
        groups: "gatewayed"
        ansible_host: "{{ dns_monitoring_instance_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
        ansible_ssh_common_args: >
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand='ssh -W %h:%p
          -q linux@{{ controller_public_ip }}
          -i {{ local_private_key }}
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null'
          -o PasswordAuthentication=no

- name: Wait for hosts
  hosts: gatewayed
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        timeout: 120

- name: Checking reporting processes
  hosts: dns_instance
  tasks:
    - name: Get reporting processes list from remote host  # noqa 301 305
      ignore_errors: yes
      shell: "ps aux | grep 'csm_test_utils internal_dns_resolve' | awk '{print $2}'"
      register: process_monitor
    - name: Kill running reporting processes  # noqa 301 305
      ignore_errors: yes
      shell: "kill {{ process_monitor.stdout_lines[0] }}"
    - name: Waiting for status
      wait_for:
        path: "/proc/{{ process_monitor.stdout_lines[0] }}/status"
        state: absent
      ignore_errors: yes

- name: Install telegraf client on dns_instance
  hosts: dns_instance
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
    - "./vars/nginx_telegraf_local.yml"
  roles:
    - role: telegraf-client
      vars:
        telegraf_influxdb_retention_policy: ""
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: "influx"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: "localhost"
            extra_parameters: "{{ extra_parameters }}"

- name: Install csm test utils
  hosts: dns_instance
  become: yes
  vars:
    dns: "{{ hostvars.test_host.dns_monitoring_record_name }}"
    nohup: "nohup /usr/bin/python3 -m csm_test_utils"
    tlg: "http://localhost:8080"
  tasks:
    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install PIP
      apt:
        name:
          - python3-setuptools
          - python3-pip

    - name: Install test utils
      pip:
        executable: pip3
        name: csm-test-utils
        state: forcereinstall

    - name: Start monitoring  # noqa 301 305
      shell: >
        "{{ nohup }} {{ item }} --telegraf {{ tlg }} --dns_name {{ dns }} &"
      loop:
        - "internal_dns_resolve"
