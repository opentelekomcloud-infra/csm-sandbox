---
- name: Prepare controller variables
  import_playbook: bastion_setup.yaml

- name: Prepare variables
  hosts: local
  vars:
    scenario_name: iscsi_monitoring
    infra_state: present
    terraform_variables:
      network_cidr: "{{ terraform_network_cidr }}"
      network_id: "{{ main_network_id }}"
      router_id: "{{ main_router_id }}"
      subnet_id: "{{ main_subnet_id }}"
  roles:
    - build_infrastructure
  tasks:
    - name: Register build result
      set_fact:
        iscsi_initiator_instance_ip: "{{ tf_output.outputs['iscsi_initiator_instance_ip'].value }}"
        iscsi_target_instance_ip: "{{ tf_output.outputs['iscsi_target_instance_ip'].value }}"

    - name: Register iscsi_initiator
      add_host:
        name: iscsi_initiator
        groups: gatewayed
        ansible_host: "{{ iscsi_initiator_instance_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
        ansible_ssh_common_args: >
            -o UserKnownHostsFile=/dev/null
            -o ProxyCommand='ssh -W %h:%p
            -q linux@{{ controller_public_ip }}
            -i {{ local_private_key }}
            -o StrictHostKeyChecking=no
            -o UserKnownHostsFile=/dev/null'
            -o PasswordAuthentication=no

    - name: Register iscsi_target
      add_host:
        name: iscsi_target
        groups: gatewayed
        ansible_host: "{{ iscsi_target_instance_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
        ansible_ssh_common_args: >
            -o UserKnownHostsFile=/dev/null
            -o ProxyCommand='ssh -W %h:%p
            -q linux@{{ controller_public_ip }}
            -i {{ local_private_key }}
            -o StrictHostKeyChecking=no
            -o UserKnownHostsFile=/dev/null'
            -o PasswordAuthentication=no

- name: Prepare attached device on target server
  hosts: iscsi_target
  become: yes
  vars_files:
    - "./vars/scenario_iscsi_vars.yaml"
  roles:
    - iscsi_target

- name: Prepare initiator and connect device
  hosts: iscsi_initiator
  become: yes
  vars_files:
    - "./vars/scenario_iscsi_vars.yaml"
  tasks:
    - name: Perform a discovery on target
      open_iscsi:
        show_nodes: yes
        discover: yes
        portal: "{{ hostvars.iscsi_target.ansible_host }}"
      register: res
      retries: 3
      delay: 3
      until: res is success

    - name: Connect to the target
      open_iscsi:
        auto_node_startup: yes
        login: yes
        node_user: "{{ incominguser_username }}"
        node_pass: "{{ incominguser_password }}"
        portal: "{{ hostvars.iscsi_target.ansible_host }}"

- name: Prepare attached iSCSI device on initiator
  hosts: iscsi_initiator
  become: yes
  vars_files:
    - "./vars/scenario_iscsi_vars.yaml"
  tasks:
    - name: Add hdparm repository [Debian/Ubuntu]
      apt_repository:
        repo: deb http://deb.debian.org/debian stretch main
        state: present

    - name: Install hdparm
      apt:
        name: hdparm
        update_cache: yes

    - name: Create a ext4 filesystem on attached disks
      filesystem:
        fstype: ext4
        dev: "{{ device }}"

    - name: Create directories for mount
      file:
        path: "{{ mount_point }}"
        state: directory
        mode: "0755"

    - name: Mount up devices
      mount:
        path: "{{ mount_point }}"
        src: "{{ device }}"
        fstype: ext4
        state: mounted

    - name: Install cron
      apt:
        pkg:
          - cron

    - name: Cron job for create big files on SCSI device every 5 minutes
      cron:
        name: "Creating big file on iSCSI device"
        minute: "*/5"
        job: >
          /bin/dd if=/dev/urandom of="{{ mount_point }}/bigfile.txt"
          bs=5000000 count=100 oflag=dsync

    - name: Cron job for reading big files on all devices every 2 minutes
      cron:
        name: "Reading big files from iSCSI device"
        minute: "*/2"
        job: /sbin/hdparm -tT "{{ device }}"

- name: Install telegraf client on initiator
  hosts: iscsi_initiator
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yaml"
    - "./vars/scenario_iscsi_vars.yaml"
  roles:
    - telegraf_client
  vars:
    telegraf_influxdb_retention_policy: ""
    telegraf_plugins_base:
      - name: mem
      - name: diskio
        options:
          devices: ["{{ device }}"]
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"
      - name: http_listener_v2
        options:
          service_address: "localhost:8080"
          data_format: "influx"

- name: Prepare test
  hosts: iscsi_initiator
  become: yes
  tasks:
    - name: copy test script on initiator
      copy:
        src: iscsi_connection_status.sh
        dest: /tmp/

    - name: Changing perm of "iscsi_connection_status.sh", adding "+x"
      file:
        dest: /tmp/iscsi_connection_status.sh
        mode: a+x

    - name: Schedule connection test
      cron:
        name: "Check status of iSCSI connection"
        minute: "*/1"
        job: /tmp/iscsi_connection_status.sh
