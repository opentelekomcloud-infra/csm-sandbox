---
- name: Prepare clouds.yaml for test_host
  import_playbook: prepare_config.yml

- name: Prepare variables
  hosts: test_host
  tasks:
  - name: Register scenario 6 vars
    set_fact:
      terraform_base_dir: "terraform"
      requirements: "requirements.txt"

- name: Build infrastructure
  hosts: test_host
  roles:
    - build_infrastructure
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
    TF_VAR_psql_password: "{{ psql_password }}"
  vars:
    infra_state: present
  tasks:
  - name: Register build result
    set_fact:
      rds_instance_id: "{{ tf_output.outputs['rds_id'].value }}"
      db_password: "{{ tf_output.outputs['db_password'].value }}"
      db_username: "{{ tf_output.outputs['db_username'].value }}"
      db_address: "{{ tf_output.outputs['db_address'].value }}"
      db_host: "{{ tf_output.outputs['db_host'].value }}"
      db_port: "{{ tf_output.outputs['db_port'].value }}"
      scn6_public_ip: "{{ tf_output.outputs['scn_public_ip'].value }}"
  - name: Download private key from test_host
    fetch:
      src: "{{ tmp_dir }}/{{ key_name }}"
      dest:  "{{ local_private_key }}"
      mode: 0600
      flat: yes

- name: Register used hosts
  hosts: local
  tasks:
    - name: Register host
      add_host:
        hostname: "scn6_ecs"
        ansible_ssh_host: "{{ hostvars.test_host.scn6_public_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"

- name: Wait for host
  hosts: scn6_ecs
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        delay: 5
        timeout: 120

- name: Start Server
  hosts: scn6_ecs
  become: yes
  vars:
    clouds_config: "/tmp/clouds.yaml"
    server_port: 8081
    run_option: "sqla"
    drivername: "postgresql+psycopg2"
  roles:
    - role: too_simple_server
      vars:
        pg_db_url: "{{ hostvars.test_host.db_address }}"
        pg_database: "entities"
        pg_username: "{{ hostvars.test_host.db_username }}"
        pg_password: "{{ hostvars.test_host.db_password }}"
        pg_host: "{{ hostvars.test_host.db_host }}"
        pg_port: "{{ hostvars.test_host.db_port }}"
        debug: True
  tasks:
    - name: Register facts
      set_fact:
        clouds_config: "{{ clouds_config }}"
        server_local_port: "{{ server_port }}"
        run_option: "{{ run_option }}"
        drivername: "{{ drivername }}"
        source: "/tmp/rds/{{ run_option }}/data.yaml"

    - name: Copy cloud.yaml to host
      copy:
        src: "{{ hostvars.test_host.clouds_yaml_file }}"
        dest: "{{ clouds_config }}"

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install PIP, rsync libpq-dev and python-dev
      apt:
        name:
          - python3-setuptools
          - python3-pip
          - libpq-dev
          - python-dev
          - cron
          - rsync

    - name: Install pg2 and SQLAlchemy for Postgresql
      pip:
        executable: pip3
        name:
          - psycopg2-binary
          - pyyml
          - SQLAlchemy
        state: forcereinstall

    - name: Copy scripts to host
      synchronize:
        src: rds/
        dest: /tmp/rds/

    - name: Changing permissions of "check_rds_filling_status.sh"
      file: dest=/tmp/rds/check_rds_filling_status.sh mode=a+x

    - name: Add records to rds in background  # noqa 301 305
      shell: "start-stop-daemon -Sbmvp /tmp/rds/__main__.pid -x /usr/bin/python3 /tmp/rds/__main__.py -- `
              `--run_option {{ run_option }} `
              `--source {{ source }} `
              `--drivername {{ drivername }} `
              `--host {{ pg_host }} `
              `--port {{ pg_port }} `
              `--username {{ pg_username }} `
              `--password {{ pg_password }} `
              `--database {{ pg_database }}"

    - name: Schedule load script status check
      cron:
        name: "Check status of RDS filling script"
        minute: "*/59"
        job: "/tmp/rds/check_rds_filling_status.sh `
              `{{ run_option }} `
              `{{ source }} `
              `{{ pg_host }} `
              `{{ pg_port }} `
              `{{ pg_username }} `
              `{{ pg_password }} `
              `{{ drivername }} `
              `{{ pg_database }}"

- name: Install telegraf client on Server
  hosts: scn6_ecs
  become: true
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  roles:
    - role: telegraf-client
      vars:
        telegraf_influxdb_retention_policy: ""
        telegraf_local_port: 8080
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: "influx"
          - name: postgresql
            options:
              address: "postgres://{{ hostvars.test_host.db_username }}:{{ hostvars.test_host.db_password }}@{{ hostvars.test_host.db_address }}/entities"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: "localhost"
            extra_parameters: |
              location / {
                  proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_http_version 1.1;
                  proxy_pass         http://localhost:{{ server_local_port }};
              }
              location /telegraf {
                  proxy_pass         http://localhost:{{ telegraf_local_port }};
                  proxy_set_header   Host $host;
                  }

- name: Checking reporting processes
  hosts: scn6_ecs
  tasks:
    - name: Get running reporting processes list from remote host  # noqa 301 305
      ignore_errors: yes
      shell: "ps aux | grep 'csm_test_utils rds_backup_monitor' | awk '{print $2}'"
      register: process_monitor
    - name: Kill running reporting processes  # noqa 301 305
      ignore_errors: yes
      shell: "kill {{ process_monitor.stdout_lines[0] }}"
    - name: Waiting for status
      wait_for:
        path: "/proc/{{ process_monitor.stdout_lines[0] }}/status"
        state: absent
      ignore_errors: yes

- name: Install csm test utils and run reporting proccess
  hosts: scn6_ecs
  become: yes
  vars:
    cloud_config: "{{ clouds_config }}"
    cloud_name: "devstack"
    endpoint: "https://rds.eu-de.otc.t-systems.com"
    rds_instance_id: "{{ hostvars.test_host.rds_instance_id }}"
    scn6_public_ip: "{{ hostvars.test_host.scn6_public_ip }}"
  tasks:
    - name: Install test utils
      pip:
        executable: pip3
        name: csm-test-utils
        state: forcereinstall

    - name: Start monitoring RDS backups  # noqa 301 305
      shell: "nohup python3 -m csm_test_utils rds_backup_monitor `
              `--instance_id {{ rds_instance_id }} `
              `--cloud_config {{ cloud_config }} `
              `--cloud_name {{ cloud_name }} `
              `--endpoint {{ endpoint }} `
              `--target {{ scn6_public_ip }} `
              `--telegraf 'http://{{ scn6_public_ip }}' &"

