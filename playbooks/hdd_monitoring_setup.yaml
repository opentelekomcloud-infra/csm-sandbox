---
- name: Prepare controller variables
  import_playbook: bastion_setup.yaml

- name: Prepare variables
  hosts: local
  vars:
    scenario_name: hdd_monitoring
    infra_state: present
    terraform_variables:
      network_cidr: "{{ terraform_network_cidr }}"
      network_id: "{{ main_network_id }}"
      router_id: "{{ main_router_id }}"
      subnet_id: "{{ main_subnet_id }}"
  roles:
    - build_infrastructure
  tasks:
    - name: Register build result
      set_fact:
        node_ips: "{{ tf_output.outputs['hdd_ecs_local_ips'].value }}"

    - name: Register nodes
      add_host:
        name: "{{ item }}"
        groups: gatewayed
        ansible_ssh_common_args: >
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand='ssh -W %h:%p
          -q linux@{{ controller_public_ip }}
          -i {{ local_private_key }}
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null'
          -o PasswordAuthentication=no
      loop: "{{ node_ips }}"

- name: Wait for hosts
  hosts: gatewayed
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        timeout: 120

- name: Prepare attached devices on server
  hosts: gatewayed
  become: yes
  vars:
    devices:
      sata: /dev/vdb
      sas: /dev/vdc
      ssd: /dev/vdd
  tasks:
    - name: Add hdparm repository [Debian/Ubuntu]
      apt_repository:
        repo: deb http://deb.debian.org/debian stretch main
        state: present

    - name: Install required packages
      apt:
        name:
          - hdparm
        update_cache: yes

    - name: Create a ext4 filesystem on attached disks
      filesystem:
        fstype: ext4
        dev: "{{ item.value }}"
      with_items: "{{ lookup('dict', devices) }}"

    - name: Create directories for mount
      file:
        path: "/mnt/{{ item.key }}"
        state: directory
        mode: "0755"
      with_items: "{{ lookup('dict', devices) }}"

    - name: Mount up devices
      mount:
        path: "/mnt/{{ item.key }}"
        src: "{{ item.value }}"
        fstype: ext4
        state: mounted
      with_items: "{{ lookup('dict', devices) }}"

- name: Install telegraf client on server
  hosts: gatewayed
  become: yes
  vars_files:  # TODO: update connection to API monitoring external metric server
    - ./vars/telegraf_dbconnection_vars.yaml
  roles:
    - telegraf_client
  vars:
    telegraf_influxdb_retention_policy: ""
    telegraf_plugins_base:
      - name: mem
      - name: system
      - name: diskio
        options:
          devices: ["vdb", "vdc", "vdd"]
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"
