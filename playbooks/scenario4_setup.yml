---
- name: Prepare clouds.yaml for test_host
  import_playbook: prepare_config.yml

- name: Prepare variables
  hosts: test_host
  tasks:
  - name: Register scenario 4 vars
    set_fact:
      terraform_base_dir: "terraform"
      requirements: "requirements.txt"

- name: Build infrastructure
  hosts: test_host
  roles:
    - build_infrastructure
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
  vars:
    infra_state: present
  tasks:
  - name: Register build result
    set_fact:
      bastion_public_ip: "{{ tf_output.outputs['scn4_bastion_fip'].value }}"
      loadbalancer_public_ip:  "{{ tf_output.outputs['scn4_lb_fip'].value }}"
      node_ips: "{{ tf_output.outputs['scn4_vms'].value }}"
  - name: Download private key from test_host
    fetch:
      src: "{{ tmp_dir }}/{{ key_name }}"
      dest:  "{{ local_private_key }}"
      mode: 0600
      flat: yes

- name: Register used hosts
  hosts: local
  tasks:
  - name: Set local facts
    set_fact:
      loadbalancer_public_ip: "{{ hostvars.test_host.loadbalancer_public_ip }}"
      bastion_public_ip: "{{ hostvars.test_host.bastion_public_ip }}"
  - name: Register Bastion
    add_host:
      name: "bastion"
      ansible_host: "{{ bastion_public_ip }}"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
  - name: Register nodes
    add_host:
      name: "{{ item }}"
      groups: "gatewayed"
      ansible_ssh_user: "linux"
      ansible_ssh_private_key_file: "{{ local_private_key }}"
      ansible_ssh_common_args: "-o ProxyCommand='ssh -W %h:%p -q linux@{{ bastion_public_ip }} -i {{ local_private_key }}' -o PasswordAuthentication=no"
    loop: "{{ hostvars.test_host.node_ips }}"

- name: Wait for bastion
  hosts: bastion
  gather_facts: no
  tasks:
  - name: Wait for host to be up
    wait_for_connection:
      timeout: 120

- name: Wait for hosts
  hosts: gatewayed
  gather_facts: no
  tasks:
  - name: Wait for host to be up
    wait_for_connection:
      timeout: 120

- name: Register existing settings
  hosts: local
  roles:
    - register_host
  vars:
    dnsname_or_ip: "{{ hostvars.bastion.ansible_host }}"
    group: "scn4_ecs"

- name: Configure cron on main host for stress testing
  become: yes
  hosts: gatewayed
  tasks:
    - name: Install stress and cron package
      apt:
        name: ["stress", "cron"]
        update_cache: yes
        cache_valid_time: 3600

    - name: Cron job for stress CPU every 30 minutes for 8 minutes
      cron:
        name: Load cpu via stress package
        minute: "*/30"
        job: /usr/bin/stress --cpu 2 --vm 2 --vm-bytes 512M --timeout 480

- name: Install telegraf client on Bastion
  hosts: bastion
  become: yes
  vars:
    telegraf_local_port: 8080
    monitoring_local_port: 23456
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  roles:
    - role: telegraf-client
      vars:
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: "influx"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: "localhost"
            extra_parameters: |
              location / {
                  proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_http_version 1.1;
              }
              location /telegraf {
                  proxy_pass         http://localhost:{{ telegraf_local_port }};
                  proxy_set_header   Host $host;
              }
              location /smn {
                  proxy_pass         http://localhost:{{ monitoring_local_port }}/smn;
                  proxy_set_header   Host $host;
              }

- name: Install csm test utils, run as_monitoring and as_load
  hosts: bastion
  become: yes
  vars:
    lb_ip: "{{ hostvars.test_host.loadbalancer_public_ip }}"
    nohup_py3: "nohup /usr/bin/python3 -m csm_test_utils"
    telegraf_host: "http://localhost"
  tasks:
    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install PIP
      apt:
        name:
          - python3-setuptools
          - python3-pip
          - cron

    - name: Install test utils
      pip:
        executable: pip3
        name: csm-test-utils
        state: forcereinstall

    - name: Start monitoring server and lb
      shell: "{{ nohup_py3 }} {{ item }} --telegraf {{ telegraf_host }} --target {{ lb_ip }} &" # noqa 301 305
      loop:
        - "as_monitor"
        - "as_load"
