---
- name: Prepare controller variables
  import_playbook: setup_scenarios_controller.yml

- name: Prepare variables
  hosts: localhost
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
    TF_VAR_addr_3: "192.168.7"
    TF_VAR_network_id: "{{ main_network_id }}"
    TF_VAR_router_id: "{{ main_router_id }}"
    TF_VAR_subnet_id: "{{ main_subnet_id }}"
    TF_VAR_controller_ip: "{{ controller_public_ip }}"
    TF_VAR_psql_password: "Spasibo2020!"
    OS_CLOUD: "{{ lookup('env', 'OS_CLOUD') }}"
  vars:
    scenario_name: rds_backup_monitoring
    terraform_base_dir: terraform
    requirements: requirements.txt
    key_name: key_csm_controller
    infra_state: present
  roles:
    - build_infrastructure
  tasks:
    - name: Register build result
      set_fact:
        ecs_instance_ip: "{{ tf_output.outputs['ecs_ip'].value }}"
        rds_instance_id: "{{ tf_output.outputs['rds_id'].value }}"
        db_password: "{{ tf_output.outputs['db_password'].value }}"
        db_username: "{{ tf_output.outputs['db_username'].value }}"
        db_address: "{{ tf_output.outputs['db_address'].value }}"
        db_host: "{{ tf_output.outputs['db_host'].value }}"
        db_port: "{{ tf_output.outputs['db_port'].value }}"
    - name: Register ecs
      add_host:
        name: "ecs"
        groups: "gatewayed"
        ansible_host: "{{ ecs_instance_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
        ansible_ssh_common_args: >
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand='ssh -W %h:%p
          -q linux@{{ controller_public_ip }}
          -i {{ local_private_key }}
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null'
          -o PasswordAuthentication=no

- name: Wait for host
  hosts: ecs
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        delay: 5
        timeout: 120

- name: Start Server
  hosts: ecs
  become: yes
  vars:
    server_local_port: 8081
    run_option: "sqla"
    drivername: "postgresql+psycopg2"
    scenario_name: rds_backup_monitoring
    test_scripts_path: "/tmp/test-scripts"
    source: "{{ test_scripts_path }}/{{ run_option }}/data.yaml"
  roles:
    - role: too_simple_server
      vars:
        pg_db_url: "{{ hostvars.localhost.db_address }}"
        pg_database: "entities"
        pg_username: "{{ hostvars.localhost.db_username }}"
        pg_password: "{{ hostvars.localhost.db_password }}"
        pg_host: "{{ hostvars.localhost.db_host }}"
        pg_port: "{{ hostvars.localhost.db_port }}"
        debug: true
  tasks:
    - name: Set facts
      set_fact:
        server_local_port: "{{ server_local_port }}"

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install PIP, libpq-dev and python-dev
      apt:
        name:
          - python3-setuptools
          - python3-pip
          - libpq-dev
          - python-dev
          - cron

    - name: Copy scripts to host
      copy:
        src: rds/
        dest: "{{ test_scripts_path }}/"

    - name: Install pg2 and SQLAlchemy for Postgresql
      pip:
        requirements: "{{ test_scripts_path }}/rds-backup-requirements.txt"
        executable: "pip3"

    - name: Changing permissions of "check_rds_filling_status.sh"
      file:
        dest: "{{ test_scripts_path }}/check_rds_filling_status.sh"
        mode: a+x

    - name: Add records to rds in background  # noqa 301 305
      shell: "start-stop-daemon -Sbmvp {{ test_scripts_path }}/__main__.pid \
              -x /usr/bin/python3 {{ test_scripts_path }}/__main__.py --
              --run_option {{ run_option }}
              --source {{ source }}
              --drivername {{ drivername }}
              --host {{ pg_host }}
              --port {{ pg_port }}
              --username {{ pg_username }}
              --password {{ pg_password }}
              --database {{ pg_database }}"

    - name: Schedule RDS script status check
      cron:
        name: "Check status of RDS filling script"
        minute: "*/59"
        job: "{{ test_scripts_path }}/check_rds_filling_status.sh `
              `{{ run_option }} `
              `{{ source }} `
              `{{ pg_host }} `
              `{{ pg_port }} `
              `{{ pg_username }} `
              `{{ pg_password }} `
              `{{ drivername }} `
              `{{ pg_database }}"

- name: Install telegraf client on Server
  hosts: ecs
  become: true
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  roles:
    - role: telegraf-client
      vars:
        telegraf_influxdb_retention_policy: ""
        telegraf_local_port: 8080
        server_local_port: 8081
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: "influx"
          - name: postgresql
            options:
              address: "postgres://{{ hostvars.localhost.db_username }}\
              :{{ hostvars.localhost.db_password }}@{{ hostvars.localhost.db_address }}/entities"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: "localhost"
            extra_parameters: |
              location / {
                  proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_http_version 1.1;
                  proxy_pass         http://localhost:{{ server_local_port }};
              }
              location /telegraf {
                  proxy_pass         http://localhost:{{ telegraf_local_port }};
                  proxy_set_header   Host $host;
              }

- name: Checking reporting processes
  hosts: localhost
  become: yes
  tasks:
    - name: Get running reporting processes list from remote host  # noqa 301 305
      ignore_errors: yes
      shell: "ps aux | grep 'csm_test_utils rds_backup_monitor' | awk '{print $2}'"
      register: process_monitor
    - name: Kill running reporting processes  # noqa 301 305
      ignore_errors: yes
      shell: "kill {{ process_monitor.stdout_lines[0] }}"
    - name: Waiting for status
      wait_for:
        path: "/proc/{{ process_monitor.stdout_lines[0] }}/status"
        state: absent
      ignore_errors: yes

- name: Install csm test utils and run reporting proccess
  hosts: localhost
  become: yes
  vars:
    cloud_config: "/etc/openstack/clouds.yaml"
    cloud_name: "{{ lookup('env', 'OS_CLOUD') }}"
    endpoint: "https://rds.eu-de.otc.t-systems.com"
  tasks:
    - name: Start monitoring RDS backups  # noqa 301 305
      shell: "nohup python3 -m csm_test_utils rds_backup_monitor
               --instance_id {{ rds_instance_id }}
               --cloud_config {{ cloud_config }}
               --cloud_name {{ cloud_name }}
               --endpoint {{ endpoint }}
               --target {{ ecs_instance_ip }}
               --telegraf 'http://{{ ecs_instance_ip }}' &"

