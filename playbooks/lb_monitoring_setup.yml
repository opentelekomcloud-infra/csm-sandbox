---
- name: Prepare controller variables
  import_playbook: setup_scenarios_controller.yml

- name: Prepare variables
  hosts: localhost
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
    TF_VAR_addr_3: "192.168.1"
    TF_VAR_network_id: "{{ main_network_id }}"
    TF_VAR_router_id: "{{ main_router_id }}"
    TF_VAR_subnet_id: "{{ main_subnet_id }}"
  vars:
    scenario_name: lb_monitoring
    terraform_base_dir: terraform
    requirements: requirements.txt
    terraform_workspace: prod
    key_name: key_csm_controller
    infra_state: present
  roles:
    - build_infrastructure
  tasks:
    - name: Register build result
      set_fact:
        lb_control_instance_ip: "{{ tf_output.outputs['lb_ctrl_ip'].value }}"
        loadbalancer_public_ip: "{{ tf_output.outputs['lb_fip'].value }}"
        lb_node_ips: "{{ tf_output.outputs['lb_ecs_local_ips'].value }}"
    - name: Register nodes
      add_host:
        name: "{{ lb_control_instance_ip }}"
        groups: "telegrafed"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
        ansible_ssh_common_args: >
          -o ProxyCommand='ssh -W %h:%p -q linux@{{ controller_public_ip }}
          -i {{ local_private_key }}' -o PasswordAuthentication=no
    - name: Register nodes
      add_host:
        name: "{{ item }}"
        groups: "gatewayed"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
        ansible_ssh_common_args: >
          -o ProxyCommand='ssh -W %h:%p -q linux@{{ controller_public_ip }}
          -i {{ local_private_key }}' -o PasswordAuthentication=no
      loop: "{{ hostvars.localhost.lb_node_ips }}"

- name: Wait for hosts
  hosts: gatewayed
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        timeout: 120

- name: Start Server
  hosts: gatewayed
  become: yes
  roles:
    - too_simple_server
  vars:
    debug: True
    server_port: 80

- name: Install telegraf client on Bastion
  hosts: telegrafed
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
    - "./vars/nginx_telegraf_local.yml"
  roles:
    - role: telegraf-client
      vars:
        telegraf_influxdb_retention_policy: ""
        telegraf_plugins_base:
          - name: http_listener_v2
            options:
              service_address: "localhost:{{ telegraf_local_port }}"
              data_format: "influx"
    - role: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: yes
        nginx_vhosts:
          - listen: "80"
            server_name: "localhost"
            extra_parameters: "{{ extra_parameters }}"

- name: Install telegraf client on nodes
  hosts: gatewayed
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
  roles:
    - telegraf-client
  vars:
    telegraf_influxdb_retention_policy: ""
    telegraf_plugins_base:
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"
      - name: net
        options:
          interfaces:
            - "eth*"
            - "enp0s[0-1]"
            - "lo"
            - "ens3"

- name: Prepare csm runner
  hosts: vcloud_csmrunner
  become: yes
  tasks:
  - name: Install csm-test-utils
    pip:
      executable: pip3
      name: csm-test-utils

- name: Checking reporting processes
  hosts: vcloud_csmrunner
  become: yes
  tasks:
    - name: Get reporting processes list from remote host  # noqa 301 305
      ignore_errors: yes
      shell: "ps aux | grep 'csm_test_utils monitor' | awk '{print $2}'"
      register: process_monitor
    - name: Kill running reporting processes  # noqa 301 305
      ignore_errors: yes
      shell: "kill {{ process_monitor.stdout_lines[0] }}"
    - name: Waiting for status
      wait_for:
        path: "/proc/{{ process_monitor.stdout_lines[0] }}/status"
        state: absent
      ignore_errors: yes

- name: Start reporting for scenario
  hosts: vcloud_csmrunner
  become: yes
  vars:
    elb_ip: "{{ hostvars.test_host.loadbalancer_public_ip }}"
    bastion_ip: "{{ hostvars.test_host.bastion_public_ip }}"
  tasks:
  - name: Execute csm_test_utils  # noqa 301 305
    shell: "nohup python3 -m csm_test_utils monitor --target {{ elb_ip }} --telegraf 'http://{{ bastion_ip }}' &"
