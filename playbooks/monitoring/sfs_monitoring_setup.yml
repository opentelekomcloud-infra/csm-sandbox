---
- name: Prepare controller variables
  import_playbook: ../setup_scenarios_controller.yml

- name: Prepare variables
  hosts: localhost
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ clouds_yaml_file }}"
  vars:
    scenario_name: "sfs_monitoring"
    terraform_base_dir: "terraform"
    requirements: "requirements.txt"
  roles:
    - build_infrastructure
  tasks:
    - name: Register build result
      set_fact:
        sfs_monitoring_initiator_ip: "{{ tf_output.outputs['initiator_instance_ip'].value }}"
        sfs_monitoring_target_ip: "{{ tf_output.outputs['target_instance_ip'].value }}"
        sfs_monitoring_sfs_path: "{{ tf_output.outputs['sfs_path'].value }}"

- name: Register used hosts
  hosts: local
  tasks:
    - name: Set local facts
      set_fact:
        sfs_monitoring_initiator_ip: "{{ hostvars.test_host.sfs_monitoring_initiator_ip }}"
        sfs_monitoring_target_ip: "{{ hostvars.test_host.sfs_monitoring_target_ip }}"
    - name: Register Bastion
      add_host:
        name: "bastion"
        ansible_host: "{{ bastion_public_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
    - name: Register sfs_monitoring_initiator
      add_host:
        name: "sfs_monitoring_initiator"
        groups: "gatewayed"
        ansible_host: "{{ sfs_monitoring_initiator_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
        ansible_ssh_common_args: "-o ProxyCommand='ssh -W %h:%p -q linux@{{ bastion_public_ip }} -i {{ local_private_key }}' -o PasswordAuthentication=no"
    - name: Register sfs_monitoring_target
      add_host:
        name: "sfs_monitoring_target"
        groups: "gatewayed"
        ansible_host: "{{ sfs_monitoring_target_ip }}"
        ansible_ssh_user: "linux"
        ansible_ssh_private_key_file: "{{ local_private_key }}"
        ansible_ssh_common_args: "-o ProxyCommand='ssh -W %h:%p -q linux@{{ bastion_public_ip }} -i {{ local_private_key }}' -o PasswordAuthentication=no"

- name: Wait for bastion
  hosts: bastion
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        timeout: 120

- name: Wait for hosts
  hosts: gatewayed
  gather_facts: no
  tasks:
    - name: Wait for host to be up
      wait_for_connection:
        timeout: 120

- name: Setup sfs scenario on bastion
  hosts: bastion
  become: yes
  vars:
    - sfs_shared_path: "{{ hostvars.test_host.sfs_monitoring_sfs_path }}"
    - mount_path: "/mnt/sfs_share"
  tasks:
    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install PIP
      apt:
        name:
          - python3-setuptools
          - python3-pip

    - name: Install test utils
      pip:
        executable: pip3
        name: csm-test-utils
        state: forcereinstall

    - name: Install NFS mount utility
      apt:
        pkg: nfs-common
        state: present

    - name: Unmount a mounted volume
      mount:
        path: "{{ mount_path }}"
        state: unmounted

    - name: Mount NFS share
      mount:
        fstype: nfs
        name: "{{ mount_path }}"
        opts: "vers=3,timeo=600,nolock"
        src: "{{ sfs_shared_path }}"
        state: mounted

    - name: Copy NFS stats script to bastion
      copy:
        src: "nfs/nfsiostat.sh"
        dest: /tmp/

    - name: Changing perm of "nfsiostat.sh", adding "+x"
      file: dest=/tmp/nfsiostat.sh mode=a+x

    - name: Get reporting processes list from remote host  # noqa 301 305
      ignore_errors: yes
      shell: "ps aux | grep 'csm_test_utils sfs_compare' | awk '{print $2}'"
      register: process_monitor

    - name: Kill running reporting processes  # noqa 301 305
      ignore_errors: yes
      shell: "kill {{ process_monitor.stdout_lines[0] }}"

    - name: Waiting for status
      wait_for:
        path: "/proc/{{ process_monitor.stdout_lines[0] }}/status"
        state: absent
      ignore_errors: yes

    - name: Execute csm_test_utils  # noqa 301 305
      shell: "nohup python3 -m csm_test_utils sfs_compare --telegraf http://localhost:8080 &"

- name: Install telegraf client on Bastion
  hosts: bastion
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
    - "./vars/sfs_monitoring_vars.yml"
  roles:
    - telegraf-client
  vars:
    telegraf_influxdb_retention_policy: ""
    telegraf_plugins_base:
      - name: mem
      - name: exec
        options:
          commands: [ "/tmp/nfsiostat.sh" ]
          timeout: "10s"
          data_format: "influx"
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"
      - name: http_listener_v2
        options:
          service_address: "localhost:8080"
          data_format: "influx"

- name: Prepare attached device on target server
  hosts: sfs_monitoring_target
  become: yes
  vars_files:
    - "./vars/sfs_monitoring_vars.yml"
  roles:
    - iscsi_target

- name: Prepare initiator and connect device
  hosts: sfs_monitoring_initiator
  become: yes
  vars_files:
    - "./vars/sfs_monitoring_vars.yml"
  tasks:
    - name: Perform a discovery on target
      open_iscsi:
        show_nodes: yes
        discover: yes
        portal: "{{ hostvars.sfs_monitoring_target.ansible_host }}"

    - name: Connect to the target
      open_iscsi:
        auto_node_startup: yes
        login: yes
        node_user: "{{ incominguser_username }}"
        node_pass: "{{ incominguser_password }}"
        portal: "{{ hostvars.sfs_monitoring_target.ansible_host }}"

- name: Prepare attached iSCSI device on initiator
  hosts: sfs_monitoring_initiator
  become: yes
  vars_files:
    - "./vars/sfs_monitoring_vars.yml"
  tasks:
    - name: Add hdparm repository [Debian/Ubuntu]
      apt_repository:
        repo: deb http://deb.debian.org/debian stretch main
        state: present

    - name: Install hdparm
      apt:
        name: hdparm
        update_cache: yes

    - name: Create a ext4 filesystem on attached disks
      filesystem:
        fstype: ext4
        dev: "{{ device }}"

    - name: Create directories for mount
      file:
        path: "{{ mount_point }}"
        state: directory
        mode: "0755"

    - name: Mount up devices
      mount:
        path: "{{ mount_point }}"
        src: "{{ device }}"
        fstype: ext4
        state: mounted

    - name: Install cron
      apt:
        pkg:
          - cron

    - name: Cron job for create big files on SCSI device every 5 minutes
      cron:
        name: "Creating big file on iSCSI device"
        minute: "*/5"
        job: /bin/dd if=/dev/urandom of="{{ mount_point }}/bigfile.txt" bs=5000000 count=100 oflag=dsync

    - name: Cron job for reading big files on all devices every 2 minutes
      cron:
        name: "Reading big files from iSCSI device"
        minute: "*/2"
        job: /sbin/hdparm -tT "{{ device }}"

- name: Install telegraf client on initiator
  hosts: sfs_monitoring_initiator
  become: yes
  vars_files:
    - "./vars/telegraf_dbconnection_vars.yml"
    - "./vars/sfs_monitoring_vars.yml"
  roles:
    - telegraf-client
  vars:
    telegraf_influxdb_retention_policy: ""
    telegraf_plugins_base:
      - name: mem
      - name: diskio
        options:
          devices: [ "{{ device }}" ]
      - name: cpu
        options:
          percpu: "false"
          totalcpu: "true"
          fielddrop:
            - "time_*"
      - name: http_listener_v2
        options:
          service_address: "localhost:8080"
          data_format: "influx"

- name: Prepare test
  hosts: sfs_monitoring_initiator
  become: yes
  tasks:
    - name: copy test script on initiator
      copy:
        src: iscsi_connection_status.sh
        dest: /tmp/

    - name: Changing perm of "iscsi_connection_status.sh", adding "+x"
      file: dest=/tmp/iscsi_connection_status.sh mode=a+x

    - name: Schedule connection test
      cron:
        name: "Check status of iSCSI connection"
        minute: "*/1"
        job: /tmp/iscsi_connection_status.sh
