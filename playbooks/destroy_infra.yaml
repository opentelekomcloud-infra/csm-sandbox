---
- name: Build/Check the main infrastructure
  hosts: local
  tasks:
    - include: vpc_peering.yaml
      vars:
        peering_state: absent
        vpc_peering_name: "{{ item.key }}_to_{{ item.value }}"
        peering_local_router: "{{ item.key }}_router"
        peering_project_id: "{{ project_name }}"
        peering_peer_router: "{{ item.value }}_router"
        peering_peer_id: "{{ project_name }}"
        peering_destination_local: "{{ vpcs[item.key] }}"
        peering_destination_peer: "{{ vpcs[item.value] }}"
      with_dict: "{{ vpc_peerings }}"
      ignore_errors: true

    - include_role:
        name: ecs_node
      vars:
        state: absent
        ecs_name: "{{ hostvars[host_name].name }}"
      loop: "{{ groups['all'] }}"
      loop_control:
        loop_var: host_name
      when: hostvars[host_name].role=="instance" and host_name not in groups['disabled']  and hostvars[host_name].vpc != "VPC_C"

    - include_role:
        name: bastion
      vars:
        state: absent
        bastion_name: "{{ hostvars[item].name }}"
      loop: "{{ groups['all'] }}"
      when: hostvars[item].role=="watcher" and item not in groups['disabled'] and hostvars[item].vpc != "VPC_C"

    - include_role:
        name: public_router
      vars:
        state: absent
        public_router_scenario: "{{ item.key }}"
      loop: "{{ vpcs | dict2items }}"
      when: item.key != "VPC_C"

    - include: nat_gateway.yaml
      vars:
        state: absent
        nat_gateway_scenario: "VPC_C"
        nat_gateway_instance_name: "{{ hostvars[host_name].name }}"
      loop: "{{ groups['all'] }}"
      loop_control:
        loop_var: host_name
      when: hostvars[host_name].role=="instance" and host_name not in groups['disabled'] and hostvars[host_name].vpc == "VPC_C"

- name: Delete common container
  hosts: local
  tasks:

    - name: Delete object with private key
      swift_client:
        container: "{{ container_name }}"
        object_name: "{{ object_private_key }}"
        state: absent

    - name: Delete object with infra eips
      swift_client:
        container: "{{ container_name }}"
        object_name: "{{ infra_eips_object }}"
        state: absent

    - name: Delete container
      swift_client:
        container: "{{ container_name }}"
        state: absent
