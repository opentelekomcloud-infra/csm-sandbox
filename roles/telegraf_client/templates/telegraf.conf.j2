# Telegraf configuration
[agent]
  interval = "{{ telegraf_agent_interval }}"
  round_interval = {{ telegraf_round_interval }}
  metric_batch_size = {{ telegraf_metric_batch_size }}
  metric_buffer_limit = {{ telegraf_metric_buffer_limit }}
  collection_jitter = "{{ telegraf_collection_jitter }}"
  flush_interval = "{{ telegraf_flush_interval }}"
  flush_jitter = "{{ telegraf_flush_jitter }}"

  ## Run telegraf in debug mode
  debug = {{ telegraf_debug }}
  ## Run telegraf in quiet mode
  quiet = {{ telegraf_quiet }}

  # Override default hostname, if empty use os.Hostname()
{% if telegraf_hostname is defined and telegraf_hostname != None %}
  hostname = "{{ telegraf_hostname }}"
{% else %}
  hostname = "{{ ansible_hostname }}"
{% endif %}

  omit_hostname = {{ telegraf_omit_hostname }}

###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

[outputs]
{% if telegraf_influxdb == true %}
[[outputs.influxdb]]
  urls = [ "{{ telegraf_influxdb_urls|join('","') }}" ] # required
  database = "{{ telegraf_influxdb_database }}" # required
  precision = "{{ telegraf_influxdb_precision }}"
  retention_policy = "{{ telegraf_influxdb_retention_policy }}"
  write_consistency = "{{ telegraf_influxdb_write_consistency }}"

  timeout = "{{ telegraf_influxdb_timeout }}"
{% if telegraf_influxdb_username is defined and telegraf_influxdb_username != None %}
  username = "{{ telegraf_influxdb_username }}"
{% endif %}
{% if telegraf_influxdb_password is defined and telegraf_influxdb_password != None %}
  password = "{{ telegraf_influxdb_password }}"
{% endif %}
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
{% if telegraf_influxdb_user_agent is defined and telegraf_influxdb_user_agent != None %}
  user_agent = "{{ telegraf_influxdb_user_agent }}"
{% endif %}
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
{% if telegraf_influxdb_udp_payload is defined and telegraf_influxdb_udp_payload != None %}
  udp_payload = {{ telegraf_influxdb_udp_payload }}
{% endif %}
{% endif %}

{% if telegraf_graphite == true %}
[[outputs.graphite]]
  # TCP endpoint for your graphite instance.
  # If multiple endpoints are configured, the output will be load balanced.
  # Only one of the endpoints will be written to with each iteration.
  servers = [ "{{ telegraf_graphite_urls|join('","') }}" ]

  # Prefix metrics name
{% if telegraf_graphite_prefix is defined and telegraf_graphite_prefix != None %}
  prefix = "{{ telegraf_graphite_prefix }}"
{% else %}
  prefix = ""
{% endif %}

  # Graphite output template
  # see https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
{% if telegraf_graphite_template is defined and telegraf_graphite_template != None %}
  template = "{{ telegraf_graphite_template }}"
{% else %}
  template = "host.tags.measurement.field"
{% endif %}

  # Graphite templates patterns
  # 1. Template for cpu
  # 2. Template for disk*
  # 3. Default template
  # templates = [
  #  "cpu tags.measurement.host.field",
  #  "disk* measurement.field",
  #  "host.measurement.tags.field"
  #]

  # Enable Graphite tags support
{% if telegraf_graphite_tag_support is defined and telegraf_graphite_tag_support != None %}
  template = "{{ telegraf_graphite_tag_support }}"
{% else %}
  graphite_tag_support = false
{% endif %}

  # Character for separating metric name and field for Graphite tags
  graphite_separator = "{{ telegraf_graphite_separator }}"

  # timeout in seconds for the write connection to graphite
  timeout = 2

  # Optional TLS Config
{% if telegraf_graphite_tls_ca is defined and telegraf_graphite_tls_ca != None %}
  tls_ca = "{{ telegraf_graphite_tls_ca }}"
{% endif %}
{% if telegraf_graphite_tls_cert is defined and telegraf_graphite_tls_cert != None %}
  tls_cert = "{{ telegraf_graphite_tls_cert }}"
{% endif %}
{% if telegraf_graphite_tls_key is defined and telegraf_graphite_tls_key != None %}
  tls_key = "{{ telegraf_graphite_tls_key }}"
{% endif %}
  # Use TLS but skip chain & host verification
{% if telegraf_graphite_insecure_skip_verify is defined and telegraf_graphite_insecure_skip_verify != None %}
  insecure_skip_verify = "{{ telegraf_graphite_insecure_skip_verify }}"
{% endif %}
{% endif %}
###############################################################################
#                                  PLUGINS                                    #
###############################################################################

{% for plugin in telegraf_plugins %}
[[inputs.{{ plugin.name }}]]
{% if plugin.options is defined %}
{% for key, value in plugin.options.items() %}
{% if value is not mapping %}
{% if value is sequence and value is not string %}
{% if value[0] is number %}
    {{ key }} = [ {{ value|join(', ') }} ]
{% else %}
    {{ key }} = [ "{{ value|join('", "') }}" ]
{% endif %}
{% else %}
{% if value == "true" or value == "false" or value is number %}
    {{ key }} = {{ value | lower }}
{% else %}
    {{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
{% for key, value in plugin.options.items() %}
{% if value is mapping %}
    [inputs.{{ plugin.name }}.{{ key }}]
{% for lv2_key, lv2_value in value.items() %}
{% if lv2_value is sequence and lv2_value is not string %}
{% if lv2_value[0] is number %}
      {{ lv2_key }} = [ {{ lv2_value|join(', ') }} ]
{% else %}
      {{ lv2_key }} = [ "{{ lv2_value|join('", "') }}" ]
{% endif %}
{% else %}
{% if lv2_value == "true" or lv2_value == "false" or lv2_value is number %}
      {{ lv2_key }} = {{ lv2_value | lower }}
{% else %}
      {{ lv2_key }} = "{{ lv2_value }}"
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
